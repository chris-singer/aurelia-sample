{"version":3,"sources":["src/app.js","src/category-list.js","src/contact-detail.js","src/contact-list.js","src/environment.js","src/game-list.js","src/main.js","src/messages.js","src/no-selection.js","src/utility.js","src/web-api.js","src/resources/index.js","src/resources/elements/loading-indicator.js"],"names":["App","api","configureRouter","config","router","title","map","route","moduleId","name","CategoryList","ea","categories","activate","params","routeConfig","getGameCategories","gameId","then","publish","select","category","selectedCatId","id","buy","selectedCat","find","c","alert","ContactDetail","getContactDetails","updateContactAndTitle","contact","canSave","firstName","lastName","isRequesting","save","saveContact","navModel","setTitle","originalContact","JSON","parse","stringify","canDeactivate","result","confirm","ContactList","contacts","subscribe","msg","found","x","Object","assign","created","getContactList","selectedId","debug","testing","GameList","games","game","window","loadInfo","configure","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot","ContactUpdated","ContactViewed","GameViewed","NoSelection","message","areEqual","obj1","obj2","keys","every","key","hasOwnProperty","latency","getId","email","phoneNumber","WebAPI","Promise","setTimeout","results","fixedPrice","resolve","filter","instance","index","indexOf","push","globalResources","nprogress","LoadingIndicator","loadingChanged","newValue","done"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject} from 'aurelia-framework';\nimport {WebAPI} from './web-api';\n\n@inject(WebAPI)\nexport class App {\n  constructor(api) {\n    this.api = api;\n  }\n\n  configureRouter(config, router) {\n    config.title = 'Games';\n    config.map([\n      { route: '', moduleId: 'no-selection', title: 'Select'},\n      { route: 'games/:gameId/categories', moduleId: 'category-list', name: 'gameCategories'}\n    ]);\n\n    this.router = router;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {GameViewed} from './messages';\n\n@inject(WebAPI, EventAggregator)\nexport class CategoryList {\n  constructor(api, ea) {\n    this.api = api;\n    this.ea = ea;\n\n    this.categories = []\n  }\n\n  activate(params, routeConfig) {\n    this.routeConfig = routeConfig;\n\n    return this.api.getGameCategories(params.gameId).then(categories => {\n      this.categories = categories;\n      this.ea.publish(new GameViewed(null)); // need the game reference!\n    });\n  }\n\n  select(category) {\n    this.selectedCatId = category.id;\n    return true;\n  }\n\n  buy() {\n    const selectedCat = this.categories.find((c) => c.id == this.selectedCatId);\n    alert(`Bought that ${selectedCat.name}`);\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {ContactUpdated,ContactViewed} from './messages';\nimport {areEqual} from './utility';\n\n@inject(WebAPI, EventAggregator)\nexport class ContactDetail {\n  constructor(api, ea) {\n    this.api = api;\n    this.ea = ea;\n  }\n\n  activate(params, routeConfig) {\n    this.routeConfig = routeConfig;\n\n    return this.api.getContactDetails(params.id).then(contact => {\n      this.updateContactAndTitle(contact);\n      this.ea.publish(new ContactViewed(contact));\n    });\n  }\n\n  canSave() {\n    return this.contact.firstName && this.contact.lastName && ! this.api.isRequesting;\n  }\n\n  save() {\n    this.api.saveContact(this.contact).then(contact => {\n      this.updateContactAndTitle(contact);\n      this.ea.publish(new ContactUpdated(contact));\n    });\n  }\n\n  updateContactAndTitle(contact) {\n    this.contact = contact;\n    this.routeConfig.navModel.setTitle(contact.firstName);\n    this.originalContact = JSON.parse(JSON.stringify(contact));\n  }\n\n  canDeactivate() {\n    if (! areEqual(this.originalContact, this.contact)) {\n      let result = confirm('You have unsaved changes.  Are you sure you want to leave?');\n\n      if (! result) {\n        this.ea.publish(new ContactViewed(this.contact));\n      }\n\n      return result;\n    }\n\n    return true;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {ContactUpdated,ContactViewed} from './messages';\n\n@inject(WebAPI, EventAggregator)\nexport class ContactList {\n  constructor(api, ea) {\n    this.api = api;\n    this.ea = ea;\n    this.contacts = [];\n\n    ea.subscribe(ContactViewed, msg => this.select(msg.contact));\n    ea.subscribe(ContactUpdated, msg => {\n      let id = msg.contact.id;\n      let found = this.contacts.find(x => x.id == id);\n      Object.assign(found, msg.contact);\n    });\n  }\n\n  created() {\n    this.api.getContactList().then(contacts => this.contacts = contacts);\n  }\n\n  select(contact) {\n    this.selectedId = contact.id;\n    return true;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {WebAPI} from './web-api';\nimport {GameViewed} from './messages';\n\n@inject(WebAPI, EventAggregator)\nexport class GameList {\n  constructor(api, ea) {\n    this.api = api;\n    this.ea = ea;\n    this.games = [];\n\n    ea.subscribe(GameViewed, msg => this.select(msg.game));\n  }\n\n  created() {\n    this.games = window.loadInfo.games;\n    // this.api.getContactList().then(contacts => this.contacts = contacts);\n  }\n\n  select(game) {\n    this.selectedId = game.id;\n    return true;\n  }\n}\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class ContactUpdated {\n  constructor(contact) {\n    this.contact = contact\n  }\n}\n\nexport class ContactViewed {\n  constructor(contact) {\n    this.contact = contact\n  }\n}\n\nexport class GameViewed {\n  constructor(game) {\n    this.game = game\n  }\n}\n","export class NoSelection {\n  constructor() {\n    this.message = \"Please Select a Game.\";\n  }\n}\n","export function areEqual(obj1, obj2) {\n\treturn Object.keys(obj1).every((key) => obj2.hasOwnProperty(key) && (obj1[key] === obj2[key]));\n};","let latency = 200;\nlet id = 0;\n\nfunction getId(){\n  return ++id;\n}\n\nlet contacts = [\n  {\n    id:getId(),\n    firstName:'John',\n    lastName:'Tolkien',\n    email:'tolkien@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Clive',\n    lastName:'Lewis',\n    email:'lewis@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Owen',\n    lastName:'Barfield',\n    email:'barfield@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Charles',\n    lastName:'Williams',\n    email:'williams@inklings.com',\n    phoneNumber:'867-5309'\n  },\n  {\n    id:getId(),\n    firstName:'Roger',\n    lastName:'Green',\n    email:'green@inklings.com',\n    phoneNumber:'867-5309'\n  }\n];\n\nexport class WebAPI {\n  isRequesting = false;\n\n  getGameCategories(gameId){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let results = [\n          {\n            id: getId(),\n            name: 'Spank the Monkey',\n            fixedPrice: 1000\n          },\n          {\n            id: getId(),\n            name: 'Home Plate',\n            fixedPrice: 1500\n          },\n          {\n            id: getId(),\n            name: 'Brewpub',\n            fixedPrice: 2000\n          }\n        ];\n        resolve(results);\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  getContactList(){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let results = contacts.map(x =>  { return {\n          id:x.id,\n          firstName:x.firstName,\n          lastName:x.lastName,\n          email:x.email\n        }});\n        resolve(results);\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  getContactDetails(id){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let found = contacts.filter(x => x.id == id)[0];\n        resolve(JSON.parse(JSON.stringify(found)));\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  saveContact(contact){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let instance = JSON.parse(JSON.stringify(contact));\n        let found = contacts.filter(x => x.id == contact.id)[0];\n\n        if(found){\n          let index = contacts.indexOf(found);\n          contacts[index] = instance;\n        }else{\n          instance.id = getId();\n          contacts.push(instance);\n        }\n\n        this.isRequesting = false;\n        resolve(instance);\n      }, latency);\n    });\n  }\n}\n","export function configure(config) {\n  config.globalResources(['./elements/loading-indicator']);\n}\n","import * as nprogress from 'nprogress';\nimport {bindable, noView} from 'aurelia-framework';\n\n@noView(['nprogress/nprogress.css'])\nexport class LoadingIndicator {\n  @bindable loading = false;\n\n  loadingChanged(newValue) {\n    if (newValue) {\n      nprogress.start();\n    } else {\n      nprogress.done();\n    }\n  }\n}\n"],"sourceRoot":".."}